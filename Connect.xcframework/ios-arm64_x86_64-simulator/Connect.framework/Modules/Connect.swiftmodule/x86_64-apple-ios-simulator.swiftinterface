// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Connect
@_exported import Connect
import Foundation
import LocalAuthentication
import SafariServices
import Swift
import WebKit
public func sdkVersion() -> Swift.String
public protocol ConnectEventDelegate : AnyObject {
  func onCancel(_ data: Foundation.NSDictionary?)
  func onDone(_ data: Foundation.NSDictionary?)
  func onError(_ data: Foundation.NSDictionary?)
  func onLoad()
  func onRoute(_ data: Foundation.NSDictionary?)
  func onUser(_ data: Foundation.NSDictionary?)
}
@objc @_inheritsConvenienceInitializers public class ConnectViewController : UIKit.UIViewController {
  weak public var delegate: Connect.ConnectEventDelegate?
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  public func load(_ connectUrl: Swift.String)
  public func unload()
  public func close()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ConnectViewController : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension ConnectViewController : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
}
extension ConnectViewController : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension ConnectViewController : SafariServices.SFSafariViewControllerDelegate {
  @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
